c
@day
@list_days
c
c.
c
@locations_project
c
@locations_project
c
@locations_project
c
@locations_project
c
@locations_project
c
@link.description
@link.url
@link = @project.links.video
@project.links.image.description
@project.links.video.description
@project.links.video.url
@project.links.video
@project.links.video.url
c
params[:day]
c
@list_days
c
dc
@list_days
c
params[:day]
c
@list_days
c
Activity.includes(:timetables).distinct.activities_present(0.day.ago.to_s).order('timetables.execution_date').pluck('timetables.execution_date')
Activity.includes(:timetables).order('timetables.execution_date').pluck('timetables.execution_date')
Activity.includes(:timetables).pluck('timetables.execution_date').order('timetables.execution_date')
Activity.includes(:timetables).pluck('timetables.execution_date').first
Activity.includes(:timetables).pluck('timetables.execution_date')
Activity.includes(:timetables).select('timetables.execution_date').all
Activity.includes(:timetables).select(:execution_date)
Activity.includes(:timetables).all
Activity.includes(events: :timetables)t('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.includes(:events, :timetables).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.includes(:events, timetables).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.includes(:timetables,:events).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.includes(:timetables :events).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.includes(:timetables).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('imetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('timetables.execution_date,activities.id, activities.name').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('activities.id, timetables.execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('activities.id, activities.timetables.execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('activities.id, timetables.execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('activities.id, execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).select('id,execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).activities_present(0.day.ago.to_s).order('execution_date')
@list_days.first
@list_days
c
Activity.joins(events: :timetables).select('execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order('execution_date').first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order('execution_date')
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order('execution_date').first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order('timetables.execution_date').first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order('timetables.execution_date).first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order(:execution_date).first
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s).order(:execution_date)
Activity.joins(events: :timetables).distinct.select('execution_date').activities_present(0.day.ago.to_s)
@list_days.first
c
@list_days.first
c
@list_days.first
c
@list_days.first
c
Bc
@list_days.first
c
@list_days.first
c
@list_days.first
c
@list_days.first
c
Activity.includes(:events, :timetables).activities_present(0.day.ago.to_s).minimum(:execution_date).strftime ("%d/%m/%Y")
@list_days.first
c
@list_days.first
@list_days
c
@list_days.first
@list_days
c
@list_days.count
@list_days=Activity.includes(:events, :timetables).select(:execution_date).distinct.activities_present(0.day.ago.to_s)
Activity.includes(:events, :timetables).select(:execution_date).distinct.activities_present(0.day.ago.to_s)
c
Activity.includes(:events, :timetables).activities_present('23/02/2017').minimum(:execution_date)c
DateTime.now.to_s
Date.now.to_s
0.day.ago.to_s
day.ago.to_s
day.ago
Activity.includes(:events, :timetables).activities_present('23/02/2017').minimum(:execution_date)
Activity.includes(:events, :timetables).activities_present('23/02/2017')
Activity.includes(:events, :timetables).activities_present('23/02/2017').minimum
Activity.includes(:events, :timetables).activities_present.minimum
c
@activities.count
c
@activities.count
c
@activities.count
@activities
c
@activities
c
@activities.count
@activities
c
@activities
c
params[:day]
c
@activities.count
params[:q]
c
params[:q]
c
params[:q]
c
params[:q]
c
@activities.count
params[:q]
c
@activities.count
@activities
params[:q]
c
params[:q]
c
params
params[:q]
@activities.first.timetables
@activities.first.addresses
Activity.includes(:events,:addresses).all.addresses
Activity.includes(:addresses).all.addresses
Activity.all.addresses
@activities.addresses
@activities.timetables
c
@activities.timetables
@activities
c
@activities.count
c
@activities.count
@activities
c
@activities.first.timetables.count
@activities.first.timetables
@activities.first
@activities
c
@activities
c
@activities
c
params[:fecha]
c
@locations
c
gon.locations[1].addresses
gon.locations[1]
c
gon.locations[1].id
gon.locations[1]
gon.locations[1].addresses
gon.locations[1].address
gon.locations[1].addresses
gon.locations[1]
c
gon.locations[1]
gon.locations
c
gon.locations
c
gon.items
c
gon.locations
c
gon.items[1].events[1]
gon.items[1]
c
gon.items[1].events[1].address.longitude
gon.items[1].events[1].address.latitude
gon.items[1].events[1].address
gon.items[1].events[1]
gon.items[1].events
gon.items[1]
gon.items.events
gon.items
c
paginator.render
c
paginator.render
Paginator
paginator.count
c
Project.includes(:project_type).search()
Project.includes(:project_type).search
Project.includes(:project_type).all
c
params[:q]
c
project_params
params[:q]
c
params[project_params]
params[:entity_id]
project_params
:project_params
c
self.class.model_name.singular
request_form.request_type.kind
request_form_request_type.kind
c
 RequestType.where(kind: RequestType.kinds[self.class.model_name.singular.camelize]).take
RequestType.where(kind: RequestType.kind[self.class.model_name.singular.camelize]).take
RequestType.where(kind: RequestType.kinds[self.class.model_name.singular.camelize]).take
self.class.model_name.singular.camelize
self.class.model_name.singular
self.class.model_name.camelize
self.class.model_name.singular
RequestType.where(kind: RequestType.kinds[self.class.model_name.singular]).take
c
self.request_form
self.request_form.type
self.rt_extendable.type
c
request_form.request_type
c
params[:entity_id]
c
@rt_project_unsubscribe.project.name
c
@rt_project_unsubscribe.project.name
c
@rt_project_unsubscribe.project
